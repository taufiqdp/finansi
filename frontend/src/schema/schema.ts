/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health Check */
        get: operations["health_check__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/run": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Agent Run */
        post: operations["agent_run_api_v1_run_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Sessions */
        get: operations["get_sessions_api_v1_sessions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/session/{session_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Session */
        get: operations["get_session_api_v1_session__session_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Transactions */
        get: operations["get_transactions_api_v1_transactions_get"];
        put?: never;
        /** Create Transaction */
        post: operations["create_transaction_api_v1_transactions_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/transactions/{transaction_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Transaction */
        delete: operations["delete_transaction_api_v1_transactions__transaction_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** APIKey */
        APIKey: {
            /** @default apiKey */
            type: components["schemas"]["SecuritySchemeType"];
            /** Description */
            description?: string | null;
            in: components["schemas"]["APIKeyIn"];
            /** Name */
            name: string;
        } & {
            [key: string]: unknown;
        };
        /**
         * APIKeyIn
         * @enum {string}
         */
        APIKeyIn: "query" | "header" | "cookie";
        /** AgentRunRequest */
        AgentRunRequest: {
            /** Sessionid */
            sessionId: string;
            newMessage: components["schemas"]["Content-Input"];
            /**
             * Streaming
             * @default true
             */
            streaming: boolean;
        };
        /**
         * AuthConfig
         * @description The auth config sent by tool asking client to collect auth credentials and
         *
         *     adk and client will help to fill in the response
         */
        AuthConfig: {
            /** Authscheme */
            authScheme: components["schemas"]["APIKey"] | components["schemas"]["HTTPBase"] | components["schemas"]["OAuth2"] | components["schemas"]["OpenIdConnect"] | components["schemas"]["HTTPBearer"] | components["schemas"]["OpenIdConnectWithConfig"];
            rawAuthCredential?: components["schemas"]["AuthCredential"];
            exchangedAuthCredential?: components["schemas"]["AuthCredential"];
        } & {
            [key: string]: unknown;
        };
        /**
         * AuthCredential
         * @description Data class representing an authentication credential.
         *
         *     To exchange for the actual credential, please use
         *     CredentialExchanger.exchange_credential().
         *
         *     Examples: API Key Auth
         *     AuthCredential(
         *         auth_type=AuthCredentialTypes.API_KEY,
         *         api_key="1234",
         *     )
         *
         *     Example: HTTP Auth
         *     AuthCredential(
         *         auth_type=AuthCredentialTypes.HTTP,
         *         http=HttpAuth(
         *             scheme="basic",
         *             credentials=HttpCredentials(username="user", password="password"),
         *         ),
         *     )
         *
         *     Example: OAuth2 Bearer Token in HTTP Header
         *     AuthCredential(
         *         auth_type=AuthCredentialTypes.HTTP,
         *         http=HttpAuth(
         *             scheme="bearer",
         *             credentials=HttpCredentials(token="eyAkaknabna...."),
         *         ),
         *     )
         *
         *     Example: OAuth2 Auth with Authorization Code Flow
         *     AuthCredential(
         *         auth_type=AuthCredentialTypes.OAUTH2,
         *         oauth2=OAuth2Auth(
         *             client_id="1234",
         *             client_secret="secret",
         *         ),
         *     )
         *
         *     Example: OpenID Connect Auth
         *     AuthCredential(
         *         auth_type=AuthCredentialTypes.OPEN_ID_CONNECT,
         *         oauth2=OAuth2Auth(
         *             client_id="1234",
         *             client_secret="secret",
         *             redirect_uri="https://example.com",
         *             scopes=["scope1", "scope2"],
         *         ),
         *     )
         *
         *     Example: Auth with resource reference
         *     AuthCredential(
         *         auth_type=AuthCredentialTypes.API_KEY,
         *         resource_ref="projects/1234/locations/us-central1/resources/resource1",
         *     )
         */
        AuthCredential: {
            authType: components["schemas"]["AuthCredentialTypes"];
            /** Resourceref */
            resourceRef?: string | null;
            /** Apikey */
            apiKey?: string | null;
            http?: components["schemas"]["HttpAuth"] | null;
            serviceAccount?: components["schemas"]["ServiceAccount"] | null;
            oauth2?: components["schemas"]["OAuth2Auth"] | null;
        } & {
            [key: string]: unknown;
        };
        /**
         * AuthCredentialTypes
         * @description Represents the type of authentication credential.
         * @enum {string}
         */
        AuthCredentialTypes: "apiKey" | "http" | "oauth2" | "openIdConnect" | "serviceAccount";
        /**
         * Blob
         * @description Content blob.
         */
        Blob: {
            /**
             * Displayname
             * @description Optional. Display name of the blob. Used to provide a label or filename to distinguish blobs. This field is not currently used in the Gemini GenerateContent calls.
             */
            displayName?: string | null;
            /**
             * Data
             * @description Required. Raw bytes.
             */
            data?: string | null;
            /**
             * Mimetype
             * @description Required. The IANA standard MIME type of the source data.
             */
            mimeType?: string | null;
        };
        /**
         * CodeExecutionResult
         * @description Result of executing the [ExecutableCode].
         *
         *     Always follows a `part` containing the [ExecutableCode].
         */
        CodeExecutionResult: {
            /** @description Required. Outcome of the code execution. */
            outcome?: components["schemas"]["Outcome"] | null;
            /**
             * Output
             * @description Optional. Contains stdout when code execution is successful, stderr or other description otherwise.
             */
            output?: string | null;
        };
        /**
         * Content
         * @description Contains the multi-part content of a message.
         */
        "Content-Input": {
            /**
             * Parts
             * @description List of parts that constitute a single message. Each part may have
             *           a different IANA MIME type.
             */
            parts?: components["schemas"]["Part-Input"][] | null;
            /**
             * Role
             * @description Optional. The producer of the content. Must be either 'user' or
             *           'model'. Useful to set for multi-turn conversations, otherwise can be
             *           empty. If role is not specified, SDK will determine the role.
             */
            role?: string | null;
        };
        /**
         * Content
         * @description Contains the multi-part content of a message.
         */
        "Content-Output": {
            /**
             * Parts
             * @description List of parts that constitute a single message. Each part may have
             *           a different IANA MIME type.
             */
            parts?: components["schemas"]["Part-Output"][] | null;
            /**
             * Role
             * @description Optional. The producer of the content. Must be either 'user' or
             *           'model'. Useful to set for multi-turn conversations, otherwise can be
             *           empty. If role is not specified, SDK will determine the role.
             */
            role?: string | null;
        };
        /**
         * Event
         * @description Represents an event in a conversation between agents and users.
         *
         *     It is used to store the content of the conversation, as well as the actions
         *     taken by the agents like function calls, etc.
         *
         *     Attributes:
         *       invocation_id: The invocation ID of the event.
         *       author: "user" or the name of the agent, indicating who appended the event
         *         to the session.
         *       actions: The actions taken by the agent.
         *       long_running_tool_ids: The ids of the long running function calls.
         *       branch: The branch of the event.
         *       id: The unique identifier of the event.
         *       timestamp: The timestamp of the event.
         *       is_final_response: Whether the event is the final response of the agent.
         *       get_function_calls: Returns the function calls in the event.
         */
        Event: {
            content?: components["schemas"]["Content-Output"] | null;
            groundingMetadata?: components["schemas"]["GroundingMetadata"] | null;
            /** Partial */
            partial?: boolean | null;
            /** Turncomplete */
            turnComplete?: boolean | null;
            /** Errorcode */
            errorCode?: string | null;
            /** Errormessage */
            errorMessage?: string | null;
            /** Interrupted */
            interrupted?: boolean | null;
            /** Custommetadata */
            customMetadata?: {
                [key: string]: unknown;
            } | null;
            usageMetadata?: components["schemas"]["GenerateContentResponseUsageMetadata"] | null;
            /**
             * Invocationid
             * @default
             */
            invocationId: string;
            /** Author */
            author: string;
            actions?: components["schemas"]["EventActions"];
            /** Longrunningtoolids */
            longRunningToolIds?: string[] | null;
            /** Branch */
            branch?: string | null;
            /**
             * Id
             * @default
             */
            id: string;
            /** Timestamp */
            timestamp?: number;
        };
        /**
         * EventActions
         * @description Represents the actions attached to an event.
         */
        EventActions: {
            /** Skipsummarization */
            skipSummarization?: boolean | null;
            /** Statedelta */
            stateDelta?: {
                [key: string]: unknown;
            };
            /** Artifactdelta */
            artifactDelta?: {
                [key: string]: number;
            };
            /** Transfertoagent */
            transferToAgent?: string | null;
            /** Escalate */
            escalate?: boolean | null;
            /** Requestedauthconfigs */
            requestedAuthConfigs?: {
                [key: string]: components["schemas"]["AuthConfig"];
            };
        };
        /**
         * ExecutableCode
         * @description Code generated by the model that is meant to be executed, and the result returned to the model.
         *
         *     Generated when using the [FunctionDeclaration] tool and
         *     [FunctionCallingConfig] mode is set to [Mode.CODE].
         */
        ExecutableCode: {
            /**
             * Code
             * @description Required. The code to be executed.
             */
            code?: string | null;
            /** @description Required. Programming language of the `code`. */
            language?: components["schemas"]["Language"] | null;
        };
        /**
         * FileData
         * @description URI based data.
         */
        FileData: {
            /**
             * Displayname
             * @description Optional. Display name of the file data. Used to provide a label or filename to distinguish file datas. It is not currently used in the Gemini GenerateContent calls.
             */
            displayName?: string | null;
            /**
             * Fileuri
             * @description Required. URI.
             */
            fileUri?: string | null;
            /**
             * Mimetype
             * @description Required. The IANA standard MIME type of the source data.
             */
            mimeType?: string | null;
        };
        /**
         * FunctionCall
         * @description A function call.
         */
        FunctionCall: {
            /**
             * Id
             * @description The unique id of the function call. If populated, the client to execute the
             *        `function_call` and return the response with the matching `id`.
             */
            id?: string | null;
            /**
             * Args
             * @description Optional. The function parameters and values in JSON object format. See [FunctionDeclaration.parameters] for parameter details.
             */
            args?: {
                [key: string]: unknown;
            } | null;
            /**
             * Name
             * @description Required. The name of the function to call. Matches [FunctionDeclaration.name].
             */
            name?: string | null;
        };
        /**
         * FunctionResponse
         * @description A function response.
         */
        FunctionResponse: {
            /**
             * Willcontinue
             * @description Signals that function call continues, and more responses will be returned, turning the function call into a generator. Is only applicable to NON_BLOCKING function calls (see FunctionDeclaration.behavior for details), ignored otherwise. If false, the default, future responses will not be considered. Is only applicable to NON_BLOCKING function calls, is ignored otherwise. If set to false, future responses will not be considered. It is allowed to return empty `response` with `will_continue=False` to signal that the function call is finished.
             */
            willContinue?: boolean | null;
            /** @description Specifies how the response should be scheduled in the conversation. Only applicable to NON_BLOCKING function calls, is ignored otherwise. Defaults to WHEN_IDLE. */
            scheduling?: components["schemas"]["FunctionResponseScheduling"] | null;
            /**
             * Id
             * @description Optional. The id of the function call this response is for. Populated by the client to match the corresponding function call `id`.
             */
            id?: string | null;
            /**
             * Name
             * @description Required. The name of the function to call. Matches [FunctionDeclaration.name] and [FunctionCall.name].
             */
            name?: string | null;
            /**
             * Response
             * @description Required. The function response in JSON object format. Use "output" key to specify function output and "error" key to specify error details (if any). If "output" and "error" keys are not specified, then whole "response" is treated as function output.
             */
            response?: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * FunctionResponseScheduling
         * @description Specifies how the response should be scheduled in the conversation.
         * @enum {string}
         */
        FunctionResponseScheduling: "SCHEDULING_UNSPECIFIED" | "SILENT" | "WHEN_IDLE" | "INTERRUPT";
        /**
         * GenerateContentResponseUsageMetadata
         * @description Usage metadata about response(s).
         */
        GenerateContentResponseUsageMetadata: {
            /**
             * Cachetokensdetails
             * @description Output only. List of modalities of the cached content in the request input.
             */
            cacheTokensDetails?: components["schemas"]["ModalityTokenCount"][] | null;
            /**
             * Cachedcontenttokencount
             * @description Output only. Number of tokens in the cached part in the input (the cached content).
             */
            cachedContentTokenCount?: number | null;
            /**
             * Candidatestokencount
             * @description Number of tokens in the response(s).
             */
            candidatesTokenCount?: number | null;
            /**
             * Candidatestokensdetails
             * @description Output only. List of modalities that were returned in the response.
             */
            candidatesTokensDetails?: components["schemas"]["ModalityTokenCount"][] | null;
            /**
             * Prompttokencount
             * @description Number of tokens in the request. When `cached_content` is set, this is still the total effective prompt size meaning this includes the number of tokens in the cached content.
             */
            promptTokenCount?: number | null;
            /**
             * Prompttokensdetails
             * @description Output only. List of modalities that were processed in the request input.
             */
            promptTokensDetails?: components["schemas"]["ModalityTokenCount"][] | null;
            /**
             * Thoughtstokencount
             * @description Output only. Number of tokens present in thoughts output.
             */
            thoughtsTokenCount?: number | null;
            /**
             * Tooluseprompttokencount
             * @description Output only. Number of tokens present in tool-use prompt(s).
             */
            toolUsePromptTokenCount?: number | null;
            /**
             * Tooluseprompttokensdetails
             * @description Output only. List of modalities that were processed for tool-use request inputs.
             */
            toolUsePromptTokensDetails?: components["schemas"]["ModalityTokenCount"][] | null;
            /**
             * Totaltokencount
             * @description Total token count for prompt, response candidates, and tool-use prompts (if present).
             */
            totalTokenCount?: number | null;
            /** @description Output only. Traffic type. This shows whether a request consumes Pay-As-You-Go or Provisioned Throughput quota. */
            trafficType?: components["schemas"]["TrafficType"] | null;
        };
        /**
         * GroundingChunk
         * @description Grounding chunk.
         */
        GroundingChunk: {
            /** @description Grounding chunk from context retrieved by the retrieval tools. */
            retrievedContext?: components["schemas"]["GroundingChunkRetrievedContext"] | null;
            /** @description Grounding chunk from the web. */
            web?: components["schemas"]["GroundingChunkWeb"] | null;
        };
        /**
         * GroundingChunkRetrievedContext
         * @description Chunk from context retrieved by the retrieval tools.
         */
        GroundingChunkRetrievedContext: {
            /** @description Additional context for the RAG retrieval result. This is only populated when using the RAG retrieval tool. */
            ragChunk?: components["schemas"]["RagChunk"] | null;
            /**
             * Text
             * @description Text of the attribution.
             */
            text?: string | null;
            /**
             * Title
             * @description Title of the attribution.
             */
            title?: string | null;
            /**
             * Uri
             * @description URI reference of the attribution.
             */
            uri?: string | null;
        };
        /**
         * GroundingChunkWeb
         * @description Chunk from the web.
         */
        GroundingChunkWeb: {
            /**
             * Domain
             * @description Domain of the (original) URI.
             */
            domain?: string | null;
            /**
             * Title
             * @description Title of the chunk.
             */
            title?: string | null;
            /**
             * Uri
             * @description URI reference of the chunk.
             */
            uri?: string | null;
        };
        /**
         * GroundingMetadata
         * @description Metadata returned to client when grounding is enabled.
         */
        GroundingMetadata: {
            /**
             * Groundingchunks
             * @description List of supporting references retrieved from specified grounding source.
             */
            groundingChunks?: components["schemas"]["GroundingChunk"][] | null;
            /**
             * Groundingsupports
             * @description Optional. List of grounding support.
             */
            groundingSupports?: components["schemas"]["GroundingSupport"][] | null;
            /** @description Optional. Output only. Retrieval metadata. */
            retrievalMetadata?: components["schemas"]["RetrievalMetadata"] | null;
            /**
             * Retrievalqueries
             * @description Optional. Queries executed by the retrieval tools.
             */
            retrievalQueries?: string[] | null;
            /** @description Optional. Google search entry for the following-up web searches. */
            searchEntryPoint?: components["schemas"]["SearchEntryPoint"] | null;
            /**
             * Websearchqueries
             * @description Optional. Web search queries for the following-up web search.
             */
            webSearchQueries?: string[] | null;
        };
        /**
         * GroundingSupport
         * @description Grounding support.
         */
        GroundingSupport: {
            /**
             * Confidencescores
             * @description Confidence score of the support references. Ranges from 0 to 1. 1 is the most confident. This list must have the same size as the grounding_chunk_indices.
             */
            confidenceScores?: number[] | null;
            /**
             * Groundingchunkindices
             * @description A list of indices (into 'grounding_chunk') specifying the citations associated with the claim. For instance [1,3,4] means that grounding_chunk[1], grounding_chunk[3], grounding_chunk[4] are the retrieved content attributed to the claim.
             */
            groundingChunkIndices?: number[] | null;
            /** @description Segment of the content this support belongs to. */
            segment?: components["schemas"]["Segment"] | null;
        };
        /** HTTPBase */
        HTTPBase: {
            /** @default http */
            type: components["schemas"]["SecuritySchemeType"];
            /** Description */
            description?: string | null;
            /** Scheme */
            scheme: string;
        } & {
            [key: string]: unknown;
        };
        /** HTTPBearer */
        HTTPBearer: {
            /** @default http */
            type: components["schemas"]["SecuritySchemeType"];
            /** Description */
            description?: string | null;
            /**
             * Scheme
             * @default bearer
             * @constant
             */
            scheme: "bearer";
            /** Bearerformat */
            bearerFormat?: string | null;
        } & {
            [key: string]: unknown;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * HttpAuth
         * @description The credentials and metadata for HTTP authentication.
         */
        HttpAuth: {
            /** Scheme */
            scheme: string;
            credentials: components["schemas"]["HttpCredentials"];
        } & {
            [key: string]: unknown;
        };
        /**
         * HttpCredentials
         * @description Represents the secret token value for HTTP authentication, like user name, password, oauth token, etc.
         */
        HttpCredentials: {
            /** Username */
            username?: string | null;
            /** Password */
            password?: string | null;
            /** Token */
            token?: string | null;
        } & {
            [key: string]: unknown;
        };
        /**
         * Language
         * @description Required. Programming language of the `code`.
         * @enum {string}
         */
        Language: "LANGUAGE_UNSPECIFIED" | "PYTHON";
        /**
         * MediaModality
         * @description Server content modalities.
         * @enum {string}
         */
        MediaModality: "MODALITY_UNSPECIFIED" | "TEXT" | "IMAGE" | "VIDEO" | "AUDIO" | "DOCUMENT";
        /**
         * ModalityTokenCount
         * @description Represents token counting info for a single modality.
         */
        ModalityTokenCount: {
            /** @description The modality associated with this token count. */
            modality?: components["schemas"]["MediaModality"] | null;
            /**
             * Tokencount
             * @description Number of tokens.
             */
            tokenCount?: number | null;
        };
        /** OAuth2 */
        OAuth2: {
            /** @default oauth2 */
            type: components["schemas"]["SecuritySchemeType"];
            /** Description */
            description?: string | null;
            flows: components["schemas"]["OAuthFlows"];
        } & {
            [key: string]: unknown;
        };
        /**
         * OAuth2Auth
         * @description Represents credential value and its metadata for a OAuth2 credential.
         */
        OAuth2Auth: {
            /** Clientid */
            clientId?: string | null;
            /** Clientsecret */
            clientSecret?: string | null;
            /** Authuri */
            authUri?: string | null;
            /** State */
            state?: string | null;
            /** Redirecturi */
            redirectUri?: string | null;
            /** Authresponseuri */
            authResponseUri?: string | null;
            /** Authcode */
            authCode?: string | null;
            /** Accesstoken */
            accessToken?: string | null;
            /** Refreshtoken */
            refreshToken?: string | null;
        } & {
            [key: string]: unknown;
        };
        /** OAuthFlowAuthorizationCode */
        OAuthFlowAuthorizationCode: {
            /** Refreshurl */
            refreshUrl?: string | null;
            /**
             * Scopes
             * @default {}
             */
            scopes: {
                [key: string]: string;
            };
            /** Authorizationurl */
            authorizationUrl: string;
            /** Tokenurl */
            tokenUrl: string;
        } & {
            [key: string]: unknown;
        };
        /** OAuthFlowClientCredentials */
        OAuthFlowClientCredentials: {
            /** Refreshurl */
            refreshUrl?: string | null;
            /**
             * Scopes
             * @default {}
             */
            scopes: {
                [key: string]: string;
            };
            /** Tokenurl */
            tokenUrl: string;
        } & {
            [key: string]: unknown;
        };
        /** OAuthFlowImplicit */
        OAuthFlowImplicit: {
            /** Refreshurl */
            refreshUrl?: string | null;
            /**
             * Scopes
             * @default {}
             */
            scopes: {
                [key: string]: string;
            };
            /** Authorizationurl */
            authorizationUrl: string;
        } & {
            [key: string]: unknown;
        };
        /** OAuthFlowPassword */
        OAuthFlowPassword: {
            /** Refreshurl */
            refreshUrl?: string | null;
            /**
             * Scopes
             * @default {}
             */
            scopes: {
                [key: string]: string;
            };
            /** Tokenurl */
            tokenUrl: string;
        } & {
            [key: string]: unknown;
        };
        /** OAuthFlows */
        OAuthFlows: {
            implicit?: components["schemas"]["OAuthFlowImplicit"] | null;
            password?: components["schemas"]["OAuthFlowPassword"] | null;
            clientCredentials?: components["schemas"]["OAuthFlowClientCredentials"] | null;
            authorizationCode?: components["schemas"]["OAuthFlowAuthorizationCode"] | null;
        } & {
            [key: string]: unknown;
        };
        /** OpenIdConnect */
        OpenIdConnect: {
            /** @default openIdConnect */
            type: components["schemas"]["SecuritySchemeType"];
            /** Description */
            description?: string | null;
            /** Openidconnecturl */
            openIdConnectUrl: string;
        } & {
            [key: string]: unknown;
        };
        /** OpenIdConnectWithConfig */
        OpenIdConnectWithConfig: {
            /** @default openIdConnect */
            type: components["schemas"]["SecuritySchemeType"];
            /** Description */
            description?: string | null;
            /** Authorization Endpoint */
            authorization_endpoint: string;
            /** Token Endpoint */
            token_endpoint: string;
            /** Userinfo Endpoint */
            userinfo_endpoint?: string | null;
            /** Revocation Endpoint */
            revocation_endpoint?: string | null;
            /** Token Endpoint Auth Methods Supported */
            token_endpoint_auth_methods_supported?: string[] | null;
            /** Grant Types Supported */
            grant_types_supported?: string[] | null;
            /** Scopes */
            scopes?: string[] | null;
        } & {
            [key: string]: unknown;
        };
        /**
         * Outcome
         * @description Required. Outcome of the code execution.
         * @enum {string}
         */
        Outcome: "OUTCOME_UNSPECIFIED" | "OUTCOME_OK" | "OUTCOME_FAILED" | "OUTCOME_DEADLINE_EXCEEDED";
        /**
         * Part
         * @description A datatype containing media content.
         *
         *     Exactly one field within a Part should be set, representing the specific type
         *     of content being conveyed. Using multiple fields within the same `Part`
         *     instance is considered invalid.
         */
        "Part-Input": {
            /** @description Metadata for a given video. */
            videoMetadata?: components["schemas"]["VideoMetadata"] | null;
            /**
             * Thought
             * @description Indicates if the part is thought from the model.
             */
            thought?: boolean | null;
            /** @description Optional. Inlined bytes data. */
            inlineData?: components["schemas"]["Blob"] | null;
            /** @description Optional. URI based data. */
            fileData?: components["schemas"]["FileData"] | null;
            /**
             * Thoughtsignature
             * @description An opaque signature for the thought so it can be reused in subsequent requests.
             */
            thoughtSignature?: string | null;
            /** @description Optional. Result of executing the [ExecutableCode]. */
            codeExecutionResult?: components["schemas"]["CodeExecutionResult"] | null;
            /** @description Optional. Code generated by the model that is meant to be executed. */
            executableCode?: components["schemas"]["ExecutableCode"] | null;
            /** @description Optional. A predicted [FunctionCall] returned from the model that contains a string representing the [FunctionDeclaration.name] with the parameters and their values. */
            functionCall?: components["schemas"]["FunctionCall"] | null;
            /** @description Optional. The result output of a [FunctionCall] that contains a string representing the [FunctionDeclaration.name] and a structured JSON object containing any output from the function call. It is used as context to the model. */
            functionResponse?: components["schemas"]["FunctionResponse"] | null;
            /**
             * Text
             * @description Optional. Text part (can be code).
             */
            text?: string | null;
        };
        /**
         * Part
         * @description A datatype containing media content.
         *
         *     Exactly one field within a Part should be set, representing the specific type
         *     of content being conveyed. Using multiple fields within the same `Part`
         *     instance is considered invalid.
         */
        "Part-Output": {
            /** @description Metadata for a given video. */
            videoMetadata?: components["schemas"]["VideoMetadata"] | null;
            /**
             * Thought
             * @description Indicates if the part is thought from the model.
             */
            thought?: boolean | null;
            /** @description Optional. Inlined bytes data. */
            inlineData?: components["schemas"]["Blob"] | null;
            /** @description Optional. URI based data. */
            fileData?: components["schemas"]["FileData"] | null;
            /**
             * Thoughtsignature
             * @description An opaque signature for the thought so it can be reused in subsequent requests.
             */
            thoughtSignature?: string | null;
            /** @description Optional. Result of executing the [ExecutableCode]. */
            codeExecutionResult?: components["schemas"]["CodeExecutionResult"] | null;
            /** @description Optional. Code generated by the model that is meant to be executed. */
            executableCode?: components["schemas"]["ExecutableCode"] | null;
            /** @description Optional. A predicted [FunctionCall] returned from the model that contains a string representing the [FunctionDeclaration.name] with the parameters and their values. */
            functionCall?: components["schemas"]["FunctionCall"] | null;
            /** @description Optional. The result output of a [FunctionCall] that contains a string representing the [FunctionDeclaration.name] and a structured JSON object containing any output from the function call. It is used as context to the model. */
            functionResponse?: components["schemas"]["FunctionResponse"] | null;
            /**
             * Text
             * @description Optional. Text part (can be code).
             */
            text?: string | null;
        };
        /**
         * RagChunk
         * @description A RagChunk includes the content of a chunk of a RagFile, and associated metadata.
         */
        RagChunk: {
            /** @description If populated, represents where the chunk starts and ends in the document. */
            pageSpan?: components["schemas"]["RagChunkPageSpan"] | null;
            /**
             * Text
             * @description The content of the chunk.
             */
            text?: string | null;
        };
        /**
         * RagChunkPageSpan
         * @description Represents where the chunk starts and ends in the document.
         */
        RagChunkPageSpan: {
            /**
             * Firstpage
             * @description Page where chunk starts in the document. Inclusive. 1-indexed.
             */
            firstPage?: number | null;
            /**
             * Lastpage
             * @description Page where chunk ends in the document. Inclusive. 1-indexed.
             */
            lastPage?: number | null;
        };
        /**
         * RetrievalMetadata
         * @description Metadata related to retrieval in the grounding flow.
         */
        RetrievalMetadata: {
            /**
             * Googlesearchdynamicretrievalscore
             * @description Optional. Score indicating how likely information from Google Search could help answer the prompt. The score is in the range `[0, 1]`, where 0 is the least likely and 1 is the most likely. This score is only populated when Google Search grounding and dynamic retrieval is enabled. It will be compared to the threshold to determine whether to trigger Google Search.
             */
            googleSearchDynamicRetrievalScore?: number | null;
        };
        /**
         * SearchEntryPoint
         * @description Google search entry point.
         */
        SearchEntryPoint: {
            /**
             * Renderedcontent
             * @description Optional. Web content snippet that can be embedded in a web page or an app webview.
             */
            renderedContent?: string | null;
            /**
             * Sdkblob
             * @description Optional. Base64 encoded JSON representing array of tuple.
             */
            sdkBlob?: string | null;
        };
        /**
         * SecuritySchemeType
         * @enum {string}
         */
        SecuritySchemeType: "apiKey" | "http" | "oauth2" | "openIdConnect";
        /**
         * Segment
         * @description Segment of the content.
         */
        Segment: {
            /**
             * Endindex
             * @description Output only. End index in the given Part, measured in bytes. Offset from the start of the Part, exclusive, starting at zero.
             */
            endIndex?: number | null;
            /**
             * Partindex
             * @description Output only. The index of a Part object within its parent Content object.
             */
            partIndex?: number | null;
            /**
             * Startindex
             * @description Output only. Start index in the given Part, measured in bytes. Offset from the start of the Part, inclusive, starting at zero.
             */
            startIndex?: number | null;
            /**
             * Text
             * @description Output only. The text corresponding to the segment from the response.
             */
            text?: string | null;
        };
        /**
         * ServiceAccount
         * @description Represents Google Service Account configuration.
         */
        ServiceAccount: {
            serviceAccountCredential?: components["schemas"]["ServiceAccountCredential"] | null;
            /** Scopes */
            scopes: string[];
            /**
             * Usedefaultcredential
             * @default false
             */
            useDefaultCredential: boolean | null;
        } & {
            [key: string]: unknown;
        };
        /**
         * ServiceAccountCredential
         * @description Represents Google Service Account configuration.
         *
         *     Attributes:
         *       type: The type should be "service_account".
         *       project_id: The project ID.
         *       private_key_id: The ID of the private key.
         *       private_key: The private key.
         *       client_email: The client email.
         *       client_id: The client ID.
         *       auth_uri: The authorization URI.
         *       token_uri: The token URI.
         *       auth_provider_x509_cert_url: URL for auth provider's X.509 cert.
         *       client_x509_cert_url: URL for the client's X.509 cert.
         *       universe_domain: The universe domain.
         *
         *     Example:
         *
         *         config = ServiceAccountCredential(
         *             type_="service_account",
         *             project_id="your_project_id",
         *             private_key_id="your_private_key_id",
         *             private_key="-----BEGIN PRIVATE KEY-----...",
         *             client_email="...@....iam.gserviceaccount.com",
         *             client_id="your_client_id",
         *             auth_uri="https://accounts.google.com/o/oauth2/auth",
         *             token_uri="https://oauth2.googleapis.com/token",
         *             auth_provider_x509_cert_url="https://www.googleapis.com/oauth2/v1/certs",
         *             client_x509_cert_url="https://www.googleapis.com/robot/v1/metadata/x509/...",
         *             universe_domain="googleapis.com"
         *         )
         *
         *
         *         config = ServiceAccountConfig.model_construct(**{
         *             ...service account config dict
         *         })
         */
        ServiceAccountCredential: {
            /**
             * Type
             * @default
             */
            type: string;
            /** Projectid */
            projectId: string;
            /** Privatekeyid */
            privateKeyId: string;
            /** Privatekey */
            privateKey: string;
            /** Clientemail */
            clientEmail: string;
            /** Clientid */
            clientId: string;
            /** Authuri */
            authUri: string;
            /** Tokenuri */
            tokenUri: string;
            /** Authproviderx509Certurl */
            authProviderX509CertUrl: string;
            /** Clientx509Certurl */
            clientX509CertUrl: string;
            /** Universedomain */
            universeDomain: string;
        } & {
            [key: string]: unknown;
        };
        /**
         * Session
         * @description Represents a series of interactions between a user and agents.
         *
         *     Attributes:
         *       id: The unique identifier of the session.
         *       app_name: The name of the app.
         *       user_id: The id of the user.
         *       state: The state of the session.
         *       events: The events of the session, e.g. user input, model response, function
         *         call/response, etc.
         *       last_update_time: The last update time of the session.
         */
        Session: {
            /** Id */
            id: string;
            /** Appname */
            appName: string;
            /** Userid */
            userId: string;
            /** State */
            state?: {
                [key: string]: unknown;
            };
            /** Events */
            events?: components["schemas"]["Event"][];
            /**
             * Lastupdatetime
             * @default 0
             */
            lastUpdateTime: number;
        };
        /**
         * TrafficType
         * @description Output only.
         *
         *     Traffic type. This shows whether a request consumes Pay-As-You-Go or
         *     Provisioned Throughput quota.
         * @enum {string}
         */
        TrafficType: "TRAFFIC_TYPE_UNSPECIFIED" | "ON_DEMAND" | "PROVISIONED_THROUGHPUT";
        /** TransactionCreate */
        TransactionCreate: {
            /** Type */
            type: string;
            /** Amount */
            amount: number;
            /** Description */
            description: string;
            /** Category */
            category: string;
            /**
             * Date
             * Format: date-time
             */
            date: string;
        };
        /** TransactionResponse */
        TransactionResponse: {
            /** Id */
            id: number;
            /** Type */
            type: string;
            /** Amount */
            amount: number;
            /** Description */
            description: string;
            /** Category */
            category: string;
            /**
             * Date
             * Format: date-time
             */
            date: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /**
         * VideoMetadata
         * @description Describes how the video in the Part should be used by the model.
         */
        VideoMetadata: {
            /**
             * Fps
             * @description The frame rate of the video sent to the model. If not specified, the
             *             default value will be 1.0. The fps range is (0.0, 24.0].
             */
            fps?: number | null;
            /**
             * Endoffset
             * @description Optional. The end offset of the video.
             */
            endOffset?: string | null;
            /**
             * Startoffset
             * @description Optional. The start offset of the video.
             */
            startOffset?: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    health_check__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    agent_run_api_v1_run_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AgentRunRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_sessions_api_v1_sessions_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Session"][];
                };
            };
        };
    };
    get_session_api_v1_session__session_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Event"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_transactions_api_v1_transactions_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TransactionResponse"][];
                };
            };
        };
    };
    create_transaction_api_v1_transactions_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TransactionCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_transaction_api_v1_transactions__transaction_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                transaction_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
